\documentclass{article}

\begin{document}


\section{3.4 Heatmap}

<<setup, echo=FALSE,message=FALSE,warning=FALSE>>=
library(maps)
library(ggplot2)
library(dplyr)
library(tidyverse)

library(lubridate)
library(readxl)
library(forecast)
@

<<load-data, echo=FALSE,message=FALSE,warning=FALSE>>=
# Data from NASA: https://firms.modaps.eosdis.nasa.gov/
# Brazil is one of the largest agriculture producers in the world. I aim to investigate its fire occurrences and whether they have any significant impact on agriculture production.

brazil_fire_fy13 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2013/modis_2013_Brazil.csv')
brazil_fire_fy14 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2014/modis_2014_Brazil.csv')
brazil_fire_fy15 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2015/modis_2015_Brazil.csv')
brazil_fire_fy16 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2016/modis_2016_Brazil.csv')
brazil_fire_fy17 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2017/modis_2017_Brazil.csv')
brazil_fire_fy18 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2018/modis_2018_Brazil.csv')
brazil_fire_fy19 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2019/modis_2019_Brazil.csv')
brazil_fire_fy20 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2020/modis_2020_Brazil.csv')
brazil_fire_fy21 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2021/modis_2021_Brazil.csv')
brazil_fire_fy22 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2022/modis_2022_Brazil.csv')
@

<<data-cleaning, echo=FALSE,message=FALSE,warning=FALSE>>=
data_list <- list(
  brazil_fire_fy13,
  brazil_fire_fy14,
  brazil_fire_fy15,
  brazil_fire_fy16,
  brazil_fire_fy17,
  brazil_fire_fy18,
  brazil_fire_fy19,
  brazil_fire_fy20,
  brazil_fire_fy21,
  brazil_fire_fy22)

# Function to filter confident fire observation
filter_fire <- function(data) {
  filter_fire <- data %>% filter(confidence >= 95)
  return(filter_fire)
}

# Apply the filtering function to all data frames in the list
confident_fire_decade <- lapply(data_list, filter_fire)

# Access filtered data for a specific fiscal year, fy22
confident_fire_fy22 <- confident_fire_decade[[10]]
@

<<fire-by-location-fy22>>=
# Obtain the Brazil map data
brazil_map <- map_data("world", region = "Brazil")

# Create the heatmap of fire occurrences
fire_heatmap <- ggplot(confident_fire_fy22, aes(x = longitude, y = latitude)) +
  geom_polygon(data = brazil_map, aes(x = long, y = lat, group = group), 
               fill = "#bdbdbd") +
  geom_bin2d(bins = 300) +
  scale_fill_gradient(low = "#fee6ce", high = "#d94801") +
  coord_fixed(ratio = 1) +
  labs(title = "Frequency of Fire Occurrences by location in FY22") 

print(fire_heatmap)

# Colour selection from: https://colorbrewer2.org/#type=sequential&scheme=Oranges&n=9
@

<<pivot-data-by-month, echo=FALSE,message=FALSE,warning=FALSE>>=
# Create a pivot table, no. of fire occurrences vs. Months (Jan-Dec), in FY22.
confident_fire_months_fy22 <- confident_fire_fy22 %>%
  mutate(acq_date = as.Date(acq_date, format = "%Y-%m-%d")) %>%
  group_by(month = floor_date(acq_date, 'month')) %>%
  summarize(count = n())

# change "2022-01-01" to Jan etc.
confident_fire_months_fy22$abb_month <- format(confident_fire_months_fy22$month, "%b")

# Create a custom order for the months
custom_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

# Reorder the "abb_month" factor based on the custom order
confident_fire_months_fy22$abb_month <- factor(confident_fire_months_fy22$abb_month, levels = custom_order)
@

<<fire-by-months fy22,fig.height=2>>=
heatmap_plot <- ggplot(confident_fire_months_fy22, 
                       aes(x = abb_month, y = 2022, fill = count)) +
  geom_tile(width = 0.9, height = 1) +  # Create the heatmap tiles
  scale_fill_gradient(low = "white", high = "#d94801") +  # Customize the color scale
  labs(title = "Frequency of Fire Occurrences by months in FY22", x = "Month", y = "FY22") +
  theme(panel.grid = element_blank() )

# Display the heatmap
print(heatmap_plot)
@
From the table, we can clearly see that August and September are the riskiest months in terms of fire hazard, whereas November to July hardly pose any risk at all. It's natural to ask the follow-up question: How does FY22 compare to previous years? Is it valid to claim that August and September are the fire hazard season?




\section*{Chapter 3.5 Line Charts and Time Series Visualization}

A \textbf{Line chart}, often referred to as a line graph or line plot, is a statistical chart composed of a Cartesian coordinate system, some points, and lines. It is commonly used to represent changes in numerical values over continuous time intervals or ordered categories. In a line graph, the x-axis is typically used for continuous time intervals or ordered categories (such as Stage 1, Stage 2, Stage 3). The y-axis is used for quantified data, and if it is negative, it is plotted below the y-axis. Lines are used to connect adjacent data points.

Line graphs are used to analyze trends in things that change over time or ordered categories. If there are multiple sets of data, they are used to analyze the interaction and impact of these data sets over time or ordered categories. The direction of the line represents positive/negative changes, and the slope of the line indicates the degree of change.

In terms of data, a line graph requires a continuous time field or a categorical field and at least one continuous data field.


\subsection{Basic Components}
\begin{itemize}
  \item \textbf{X-Axis (Horizontal Axis):} Typically represents the independent variable, such as time or date.
  \item \textbf{Y-Axis (Vertical Axis):} Typically represents the dependent variable, like sales numbers, stock prices, or temperatures.
  \item \textbf{Line:} Connects the individual data points. In some line charts, multiple lines can represent different categories or sets of data.
\end{itemize}


\subsection{Suitability for Displaying Trends Over Time:}
\begin{itemize}
    \item \textbf{Visual Clarity:} Line charts provide a clear and concise way to view changes over time. When data points are plotted over regular intervals (e.g., days, months, years), it becomes easy to see upward or downward trends.
    \item \textbf{Comparisons:} When you have multiple lines on a single chart, you can easily compare different sets of data. For instance, comparing sales data of two different products over time.
    \item \textbf{Identification of Patterns:} Line charts help in identifying patterns and anomalies. Seasonal patterns, cyclical events, and unexpected spikes or dips become evident.
    \item \textbf{Forecasting:} By viewing historical data trends on a line chart, analysts can make predictions or forecasts for future data points.
    \item \textbf{Simplicity:} They are easy to understand and interpret. Even if someone isn't data-savvy, they can grasp the general trend and major fluctuations from a line chart.
    \item \textbf{Flexibility:} They can be used for both short-term and long-term data. Whether you're looking at stock prices minute-by-minute over a single day or global temperature averages over a century, line charts can effectively represent the data.
\end{itemize}


\subsection{Limitations:}
While line charts are excellent for displaying trends over time, they have limitations. They may not be suitable for showing individual data distributions or for data where there's no logical order. eg. too many points, too many lines, too many zeros.\\


\subsection*{Discuss the importance of time series visualisation in data analysis.}

Time series visualization refers to the graphical representation of time-ordered data points. In the world of data analysis, this form of visualization is invaluable for examining patterns, anomalies, and trends in datasets that evolve over time.\\
\textbf{Uncovering Trends:}\\
One of the primary advantages of time series visualization is the ease with which it allows analysts to identify long-term upward or downward trends in data. Recognizing these trends can help organizations make informed decisions about future strategies or interventions.\\
\textbf{Detection of Seasonality:}\\
Many datasets exhibit patterns that repeat over specific intervals, such as days, months, or years. Time series visualization makes it straightforward to spot such cyclical behaviors, which can be vital for businesses in sectors like retail or agriculture.\\
\textbf{Identifying Anomalies:}\\
Graphical representations can quickly highlight data points or periods that deviate significantly from the norm. These anomalies can indicate errors in data collection, or they may reveal significant events that need to be further investigated.\\
\textbf{Forecasting and Predictions:}\\
After identifying patterns in historical data, time series visualizations can aid in modeling future data points. Predictive modeling, underpinned by clear visualizations, allows businesses to make proactive decisions.\\
\textbf{Facilitating Comparative Analysis:}\\
Time series charts often allow for overlaying multiple data series on a single graph. This capability is useful for comparing different datasets or the same dataset under different conditions, leading to more comprehensive insights.\\
\textbf{Conclusion:}\\
Time series visualization is an indispensable tool in the arsenal of data analysts. It condenses large volumes of chronological data into easily interpretable graphics, enabling quick insights, better decision-making, and a deeper understanding of temporal dynamics in datasets. By providing a clear view of data trends, seasonality, and anomalies, time series visualization facilitates more informed and strategic actions in various domains.



\section*{Provide best practices for creating clear and informative line charts.}

\begin{itemize}
  \item Title and Labels: Every chart should have a descriptive title and axis labels to clearly convey the purpose of the visualization and the data being shown.
  \item Use of Colors: Colors should be chosen to clearly differentiate between different lines or data points but also be consistent with the overall theme or style.
  \item Gridlines and Background: Soft gridlines can help the viewer estimate values. A clean background aids in clarity.
  \item Line Types and Point Shapes: When multiple lines are on the same chart, use different line types and point shapes to differentiate between them.
  \item Consistent Scaling: The scale on the y-axis should be consistent so that the viewer isn't misled.
  \item Annotations: Important points or changes can be annotated directly on the graph.
  \item Legends: If there are multiple lines or data points with different colors/shapes, a legend should be provided.
\end{itemize}

Let's apply these practices:


First, we generate 2 series of random data.

<<first-chunk>>=
x <- seq(1, 20)
y <- runif(20)
data <- data.frame(x = x, y = y)
@

Below is a line chart of the random sample:

<<plot-chunk, echo=FALSE, fig.height=5, fig.width=7>>=
ggplot(data, aes(x = x, y = y)) +
  geom_line(color = "blue") +
  labs(
    title = "Random Sample Line Chart",
    subtitle = "A demonstration of practice for line chart",
    x = "X-axis Label",
    y = "Y-axis Label",
    caption = "Source: Randomly generated data"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.title.x = element_text(margin = margin(t = 10)),
    axis.title.y = element_text(margin = margin(r = 10))
  ) +
  scale_x_continuous(breaks = seq(1, 20, by = 1))
@


\section*{Showcase real-world examples of time series visualisations.}

Time series of the daily CNY, CAN, EUR, HKD, USD versus GBP exchange reference rate data
published by the European Central Bank over the time period from 01 Jan 2013 to 12 Oct 2023 (without weekends). The exchange rate tells you how many pounds you need to buy/sell 1 CNY, CAN, EUR, HKD, USD.

\subsection{The data set has the format as below:}

\begin{table}[h]
\centering
\begin{tabular}{|c|c|c|c|c|c|}
\hline
\textbf{Date} & \textbf{CNYtoGBP} & \textbf{CANtoGBP} & \textbf{EURtoGBP} & \textbf{HKDtoGBP} & \textbf{USDtoGBP} \\
\hline
\%d-\%m-\%y & Value & Value & Value & Value & Value \\
\hline
& & & & & \\
\hline
\end{tabular}
\caption{Field Information: CNY, CAN, EUR, HKD, USD to GBP}
\end{table}


\subsection{Multiple time series in one plot:}

<<echo=FALSE>>=
#Read in the data:
MyData <- read.csv("exchangeRate.csv",
                   header = TRUE, sep = ",",
                   dec = ".",
                   fileEncoding="UTF-8-BOM")

MyData <- data.frame(MyData)

# Convert Date to a Date object
MyData$Date <- as.Date(MyData$Date, format="%d-%b-%y")

# Order the data by Date
MyData <- MyData[order(MyData$Date), ]

# Convert columns to time series
ts_data <- lapply(MyData[-1], ts,
                  start=c(as.numeric(format(min(MyData$Date), "%Y")),
                          as.numeric(format(min(MyData$Date), "%j"))),
                  frequency=365)

# Plot time series
plot(MyData$Date, ts_data$CNYtoGBP, type="l",
     col="blue", ylim=range(MyData[-1]),
     ylab="Exchange Rate", xlab="Date",
     main="Exchange Rates Over Time")

lines(MyData$Date, ts_data$CANtoGBP, col="red")
lines(MyData$Date, ts_data$EURtoGBP, col="green")
lines(MyData$Date, ts_data$HKDtoGBP, col="purple")
lines(MyData$Date, ts_data$USDtoGBP, col="brown")
legend("topright", legend=names(ts_data),
       fill=c("blue", "red", "green", "purple", "brown"))
@

\subsection{Decomposition of one time series into trend, seasonal, and random.}


One of the primary advantages of time series visualization is the ease with which it allows analysts to identify long-term upward or downward trends in data and patterns that repeat over specific intervals. By decomposing the time series, it would be easy to see those features.

<<echo=FALSE>>=
plot(decompose(ts_data$CNYtoGBP), xlab="Date")
@


\subsection{Double y-axis time series plot.}

If we want to display two different time series that measure two different quantities at the same time points, we can draw the second series again on the second Y-axis on the right side.

<<echo=FALSE>>=
# Plot the first time series with its y-axis
plot(ts_data$CNYtoGBP, type="l", col="blue", ylab="Exchange Rate", xlab="Date",
     main="Exchange Rates Over Time")

# Add the second time series with a secondary y-axis
par(new=TRUE)
plot(ts_data$EURtoGBP, type="l", col="red", axes=FALSE, xlab=NA, ylab=NA)
axis(side=4)  # Add the secondary y-axis on the right
mtext("Temp", side=4, line=3)  # Label the secondary y-axis

# Add a legend to distinguish the two time series
legend("topright", legend=c("CNYtoGBP", "EURtoGBP"),
       col=c("blue", "red"), lty=1, cex=0.8)
@





\end{document}
