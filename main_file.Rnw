\documentclass{article}
\usepackage{hyperref}
\usepackage{blindtext}
\usepackage{graphicx}
\usepackage{float}
\usepackage[a4paper, total={6in, 8in}]{geometry}

\title{Data Visualisation: Theory and Practice}
\author{Yujie Chu, Pia Fullaondo, Qinqing Li, Jacko Zhou}

\begin{document}

<<setup, echo=FALSE, message=FALSE, warning=FALSE, include = FALSE>>=
library(maps)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(lubridate)
library(readxl)
library(forecast)
library(plotly)
library(sf)
library(tmap)
library(gridExtra)
library(igraph)
library(scatterplot3d)
library(stats)
library(gridExtra)
library(cowplot)
library(datasets)
data(ToothGrowth)
data(mtcars)
data(trees)

opts_chunk$set(fig.path = 'figure/beamer-',
               fig.align = 'center',
               fig.show = 'hold', size = "scriptsize",
               fig.pos = 'H')

@

\maketitle 
\tableofcontents
\newpage 

\section{Introduction}

\subsection{Motivation and Background}
Motivations for having Data Visualisations - Case Example 1
\\  
\\Florence Nightingale was not only a social reformer and the founder of modern nursing but also a pioneering statistician. It was her application of data visualisation during the Crimean War that transformed the field of healthcare and pushed for social reform.
\\  
\\During the Crimean War, Nightingale recognised that unsanitary hospital conditions were claiming more lives than the battlefield itself. With the help of William Farr, Nightingale created the coxcomb aimed to illustrate the toll of preventable mortality on soldiers, as shown in Figure \ref{fig:coxcomb}.
\\  
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{Nightingale-mortality.jpg}
    \caption{``Diagram of the causes of mortality in the army in the East", in 1858 by Florence Nightingale}
    \label{fig:coxcomb}
\end{figure}
\\  
\\The coxcomb, resembling an unconventional pie chart, partitioned mortality by causes. Blue indicates preventable deaths, red indicates deaths by wounds, and black indicates other causes.
The blue areas outweighed the red and black sections combined, highlighting the disproportionate impact of unsanitary hospital conditions on the mortality rate.
\\   
\\Nightingale leveraged the compelling visualisations in her advocacy efforts, presenting them to MPs and government officials who otherwise are unlikely to read or understand statistical reports. Nightingale successfully persuaded Queen Victoria, head of the British Army at the time, to allocate funding for the improvement of better conditions in military hospitals.
\\  
\\Motivations for having Data Visualisations - Case Example 2
\\  
\\Sometimes, one glance is enough to convey the most powerful idea. Edward Hawkins, a British climate scientist and Professor of climate science at the University of Reading, is renowned for his exceptional data visualizations of climate change.
\\ 
\\In 2018, Edward Hawkins was invited to deliver a lecture on climate change in Wales to an audience with diverse backgrounds. It was important to effectively convey the growing urgency surrounding global warming. To achieve this, he created a chart that used just colours, without any words, titles, or legends, as shown in Figure \ref{fig:global}. This seemingly simple yet remarkably powerful chart visually illustrated the Earth's warming trend since 1850.
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{global.png}
    \caption{``Latest global stripes (1850-2020)", by Edward Hawkins}
    \label{fig:global}
\end{figure}
\\Known as the ``warming stripes," this chart cleverly employs blues to indicate cooler-than-average years and reds to signify hotter-than-average years. Its influence reached far and wide, gracing the front pages of major media outlets and featured in news broadcasts worldwide. It became a symbol in climate change demonstrations. Arguably, it stands as one of the most iconic graphics in modern times.
\\  
\\  
\\Misuses of Data Visualisation - Case Example 1
\\  
\\Inappropriate data visualization conceals trends rather than revealing them. Figure \ref{fig:misuse1} illustrates an instance of this issue. On the left-hand side, an inappropriate scale was used --- the y-scale ranging from 0 to 30 million dollars, obscuring the fluctuations in payroll spending. Conversely, on the right-hand side, observe that there's a significant increase of over 500,000 dollars in just two months. This revelation is substantial; considering inflation, 500,000 dollars in 1937 is worth well over 10 million dollars today.
\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{misuse1.png}
    \caption{Inappropriate use of data visualisation}
    \label{fig:misuse1}
\end{figure}
\\
\\Misuses of Data Visualisation - Case Example 2
\\  
\\Data visualization can be misused, leading to disastrous consequences. One striking example of such misuse is found in the Kallikak Family tree, which was one of the most prominent eugenic narratives of the 20th century.
\\  
\\The visualization (as shown in Figure \ref{fig:familytree}) was created by the psychologist Henry Goddard and presented in his 1912 book, ``The Kallikak Family: A Study in the Heredity of Feeble-Mindedness." Goddard's narrative centered around Martin Kallikak, a soldier who, in addition to his marriage to a respected citizen, had a one-night stand with a ``feeble-minded" maid. Goddard believed that intellectual disabilities were inherited traits. In Goddard's account, the legitimate family was successful, while the children of the ``feeble-minded" maid were labeled as "the lowest types of human beings." However, research has since revealed that the entire story was fictitious, as there was no record of the maid's existence.
\\  
\\Regrettably, the Kallikak family tree became a central element in the eugenics movement for decades afterward. It was featured in the 1935 Nazi propaganda film ``Das Erbe" (The Inheritance), which was used to promote public acceptance of Nazi eugenics laws. This propaganda laid the groundwork for the forced sterilization of approximately 400,000 people under Nazi eugenics policies.

\begin{figure}[H]
    \centering
    \includegraphics[width=0.7\textwidth]{familytree.jpg}
    \caption{The Kallikak Family tree, in 1912 by Henry Goddard }
    \label{fig:familytree}
\end{figure}

\subsection{Computing and Data Visualisation}
In data visualisation, we mostly use ggplot as our useful tool to create so many greaet plots to represent our dataset. ggplot2 is based on the Grammar of Graphics, which simply means that you can draw each part of the graph first, and then add the parts together to form a complete graph.\\
As we will explore in subsequent sections, we can achieve numerous visualizations effortlessly by utilizing data in R together with ggplot.
When using ggplot2, the following objects are used repeatedly, Such as geom, scale, coord, aes, stat, theme labs and so on.\\\\\\
\textbf{\textit{``ggplot2: Elegant Graphics for Data Analysis''}} is a book written by Hadley Wickham, focused on teaching the use of the ggplot2 package in R for data visualization. The book thoroughly covers the principles, usage, and advanced techniques of ggplot2, making it an essential resource for learning and mastering this tool.\\
\textbf{geom} refers to Geometric Objects. Geometric objects are key components of ggplot2 and are used to define how data is visually represented in a plot. Each geom function corresponds to a specific type of graphical representation in a chart.\\
\textbf{Scales} map data to the aesthetic attributes of a graphic, such as color, size, and shape. In ggplot2, scale functions allow you to adjust the details of these mappings, such as the choice of colors, the format of labels, the layout of legends, and more.\\
\textbf{Chord} talks about how data coordinates are mapped to the plane of the graphic. It provdes axis and gridlines to make it possible to read the graph. We can use Cartesian coordinate system, polar coordinates and map projections and so on.\\
\textbf{Faceting} is a powerful feature that allows you to split one plot into multiple plots based on a factor (or factors) included in the dataset. This is particularly useful for exploring and presenting data that has multiple groups or categories.\\
The \textbf{theme} function plays a crucial role in customizing the non-data components of your plots. The theme system in ggplot2 allows you to fine-tune the aesthetic details of your plot, such as fonts, labels, legends, and background colors. It is an essential tool for making your plots more readable and for creating visually appealing graphics that can be tailored to specific audiences or publication requirements.
\subsection{Dataset}
In this section, we unveil the datasets used throughout our study. This section delves into the comprehensive depiction of the diverse datasets employed. Each dataset is meticulously introduced, elucidating its source, structure, and relevance to our investigation.\\

\noindent
\textbf{The Mtcars dataset}: The \textit{Mtcars} dataset, available as a built-in dataset in R, offers a glimpse into the automotive world of the early 1970s. This dataset encompasses 11 attributes for 32 distinct car models. Some of the variables included are: Miles per Gallon (mpg), Number of cylinders (cly), Horsepower (hp), and Weight of the car in tons (wt).\\

\noindent
\textbf{The annual fire in Brazil dataset}: The Fire Information for Resource Management System (FIRMS) provides Near Real-Time (NRT) active fire data from the Moderate Resolution Imaging Spectroradiometer (MODIS), available at NASA. A subset containing historical active fire data of Brazil from 2013 to 2022 contains over 200,000 observations each year was used in this report. This dataset contains 15 variables: latitude: Latitude of active fire data, longitude: Longitude of active fire data, brightness: Brightness of active fire data, scan: Scan resolution, track: Track resolution, acq\_date: Acquisition date, acq\_time: Acquisition time, satellite: Satellite name, instrument: Instrument type, confidence: Confidence level, version: Data version, bright\_t31: Brightness temperature band 31, frp: Fire Radiative Power, daynight: Day or night indicator, type: Fire type.\\

\noindent
\textbf{The Tooth Growth dataset}: \textit{The ToothGrowth dataset}, available as a built-in dataset in R, offers the impact of vitamin C on the tooth growth of Guinea pigs. The dataset consists of 60 observations and 3 variables: len: Length of the Guinea pigs' teeth, supp: Method of vitamin C supplementation, dose: Dose of vitamin C in milligrams per day.\\

\noindent
\textbf{The Edgar Anderson's Iris dataset}: The Anderson's iris data, available as a built-in dataset in R, offers the measurements in centimeters of sepal length and width, petal length and width, along with the species name for 50 flowers from each of three species of iris. The dataset consists of 5 variables: Sepal.Length: Sepal length, Sepal.Width: Sepal width, Petal.Length: Petal length, Petal.Width: Petal width, Species: Species name.\\

\noindent
\textbf{Exchange rate data}: The exchange rate data, available at the Bank of England, provides daily spot exchange rates against GBP over the time period from 2005 to now (without weekends). A subset of daily spot exchange rate of CNY, CAD, EUR, HKD, and USD against GBP from January 2013 to October 2023 was used in this report. The dataset contains 5 variables: Date: Date of spot exchange rate, CNYtoGBP: Spot exchange rate of CNY against GBP, CANtoGBP: Spot exchange rate of CAD against GBP, EURtoGBP: Spot exchange rate of EUR against GBP, HKDtoGBP: Spot exchange rate of HKD against GBP, USDtoGBP: Spot exchange rate of USD against GBP.\\

\noindent
\textbf{Trees dataset}: The trees dataset, available as a built-in dataset in R, offers measurements from 31 felled black cherry trees and provides insights into the relationship between a tree's girth, its height, and the volume of timber it can produce. The dataset contains 3 variables: Girth: The diameter of the tree, Height: The height of the tree, Volume: The volume of timber that the tree can produce.\\

\subsection{Structure and Organisation of the Thesis}
\noindent The thesis begins with Chapter 1: "Theoretical Foundations of Data Visualisation", an introductory section that lays the theoretical foundation for the subsequent discussions.\\

\noindent The crux of this document, Chapter 2: "Modern Methods of Data Visualisation", conducts a detailed exploration of various modern methods of data visualisation. This chapter offering an in-depth analysis and critical evaluation of their applications, strengths, and limitations.\\

\noindent Chapter 3: "Practical Implementation" ventures into the practical application of Python Dash and R Shiny for constructing interactive data visualisation dashboards. Subsequently, Chapter 5: "Case Studies" presents case studies, which serve as practical demonstrations of the efficacy and relevance of the discussed visualisation methods in resolving real-world problems. Finally, Chapter 6 "State-of-the-Art Approaches" critically examines state-of-the-art approaches in data visualisation, highlighting emerging trends, methodologies, and technologies in the field.

\newpage 


\section{Theoretical Foundations of Data Visualisation}
This chapter, "Theoretical Foundations of Data Visualisation," delves into the core principles and concepts that serve as the base of this field. We seek to understand not only the "how" but also the "why" behind the creation of visualisations that captivate and inform.

\subsection{Introduction to Data Visualisation Theory}
Creating effective data visualisations requires a robust theoretical framework underlying every chart, graph, or plot. These theoretical underpinnings not only form the basis of data visualisation but also influence how we represent, perceive, understand, and interpret data.\\ 

\textbf{Guiding Principles for Data Representation}\\
The theoretical framework of data visualisation involves guiding principles dictating visual representation of data. These principles include accuracy, emphasizing faithful reflection of underlying data to reduce distortion or misinterpretation; simplicity, advocating for streamlined visuals to convey information effectively; clarity, ensuring visuals are easily understood without unnecessary complexity; relevance, presenting information pertinent to the message or question addressed; and consistency, maintaining uniform use of visual elements like color coding and labeling throughout a visualisation.\\

\begin{figure}[htbp]
  \centering
  \begin{minipage}[b]{0.45\linewidth}
    <<messygraph, echo=FALSE, fig.height=4, fig.width=6, out.width='\\linewidth'>>=
    # Messy, busy plot with a blue background and white grid lines
    data(iris)
    
    # Create a messy, busy plot with random sizes and meaningless colors, blue background, and white grid lines
    ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Sepal.Width, size = Sepal.Width)) +
      geom_point(alpha = 0.6, shape = 19) +
      scale_color_gradient(low = "orange", high = "purple") +
      theme_minimal() +
      theme(panel.background = element_rect(fill = "lightblue"),
            panel.grid.major = element_line(color = "red"),
            panel.grid.minor = element_blank()) +
      labs(
        x = "Sepal",
        y = "Petal",
        color = "Width",
        size = "Width"
      ) +
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 2)) +
      theme(
        text = element_text(size = 15, color = "blue"),
        axis.text = element_text(angle = 30, hjust = 1),
        legend.position = "right",
        legend.title = element_text(face = "italic", size = 12),
        legend.text = element_text(face = "bold")
      )
    
    @
    \label{fig:messygraph}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.45\linewidth}
    <<cleargraph1, echo=FALSE, fig.height=4, fig.width=6, out.width='\\linewidth'>>=
    # Clear, simple, and readable plot
    data(iris)
    
    # Create a clear, simple, and readable plot
    ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
      geom_point(alpha = 0.7) +
      labs(
        x = "Sepal Length",
        y = "Petal Length",
        color = "Species"
      ) +
       scale_color_manual(name = "Species",
                         values = c("setosa" = "lightblue", "versicolor" = "blue", "virginica" = "purple")) +
      guides(color = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 3)) +
      theme_minimal()
    
    @
    \label{fig:cleargraph1}
  \end{minipage}
\caption{Comparison of visualisations of the distribution of sepal and petal legth across three flower species}
\end{figure}


\textbf{Theoretical Framework and Visual Perception}\\
Understanding how the human brain processes visual information is a fundamental aspect of data visualisation theory. This knowledge plays a crucial role in designing visualisations that effectively connect with viewers. It encompasses several key considerations: Gestalt Principles, which encompass proximity, similarity, and continuity, affecting how visual elements are grouped and interpreted; Color Theory, involving the strategic use of color contrasts and harmonies to improve clarity and impact; and the management of Cognitive Load, which emphasizes the importance of reducing mental effort needed to process information.\\

\subsection{Visual Perception and Cognition}
Here, we explore human visual perception, along with the application of cognitive psychology principles in data visualisation and highlight the crucial role of pre-attentive attributes in shaping our perception of data.\\ 

\textbf{Human Visual Perception: Decoding Visual Information}\\
Human visual perception, a remarkable cognitive process, profoundly influences our understanding of the surrounding world. When applied to data visualisation, it elucidates how individuals engage with and derive meaning from visual data representations. Significant aspects of human visual perception within data visualisation encompass pattern recognition, adept at identifying trends, outliers, and relationships in data representations. Additionally, perceptual grouping, where visually similar elements are grouped together, influences the interpretation of data clusters and shapes. Moreover, the hierarchy of perception dictates that certain visual attributes are processed more swiftly and effectively than others, such as color being processed faster than text, influencing the viewer's attention hierarchy.\\

By harnessing the principles of human visual perception, applying insights from cognitive psychology, and leveraging pre-attentive attributes, data visualisation designers can create visualisations that are not only aesthetically pleasing but also cognitively efficient.	

\subsubsection{The Gestalt Principles}
The Gestalt principles play an important role in the realm of visual perception and design. We'll particularly focus on their relevance to data visualisation and strategies for creating more effective visualisations. Key Gestalt principles crucial in shaping visual information perception include proximity, which groups related elements, similarity that links similar attributes, continuity aiding trend representation, closure for implying connections, and symmetry for balance and aesthetics in visualisations.\\

\textbf{Application of Gestalt Principles in Designing Visualisations}\\
Leveraging Gestalt principles in data visualisation design enhances intuitive and effective information communication. Designers strategically employ these principles to group related data for clarity, minimize visual clutter, use color or shape to denote meaningful categories, establish smooth visual paths guiding the viewer's gaze, and imply connections or patterns within complex datasets.


\subsection{Data abstraction and Representation}
The transformation of raw data into meaningful representations is a pivotal step in data visualisation. This process, known as data abstraction, involves distilling complex datasets into visual forms that convey insights. In this section, we explore data abstraction, the hierarchies and levels of abstraction in data visualisation, and the critical trade-offs between abstraction and the potential loss of information.

\subsubsection{Data Abstraction: Transforming Raw Data}
Data abstraction involves simplifying and structuring raw data into comprehensible and insightful formats. This process serves as the bridge, transforming numbers, text, and variables into visual elements that convey patterns, trends, and relationships, forming the core of informative data visualisations.

\subsubsection{Hierarchies and Levels of Abstraction}
In data visualisation, abstraction operates on multiple levels of granularity. Hierarchies of abstraction allow us to represent data at varying levels of detail: 
\begin{enumerate}
    \item \textbf{Low-Level Abstraction}: At the lowest level, raw data is preserved in its most detailed form. This might include individual data points, measurements, or unprocessed text.
    \item \textbf{Mid-Level Abstraction}: As we move up the hierarchy, data is grouped or aggregated to provide a broader overview. For example, hourly data points may be aggregated into daily or weekly averages.
    \item \textbf{High-Level Abstraction}: At the highest level, data is represented in a condensed and abstracted form, often as summary statistics or key insights. This level provides a big-picture view.
\end{enumerate}

INSERT GRAPH!!!

\textbf{Trade-offs Between Abstraction and Information Loss}\\
While abstraction simplifies complex data, it presents trade-offs. Designers of data visualisation must strike a balance between clarity and detail, generalization and specificity, and context versus precision. Abstraction increases clarity but may sacrifice crucial detailed information necessary for some analytical tasks. It offers a more generalized view accessible to a wider audience but might overlook specific nuances essential for experts. While providing valuable context, high-level abstraction may lack the precision required for precise decision-making.\\ 

In data visualisation, the art of data abstraction lies in finding the right level of detail that effectively conveys the intended message while minimising the risk of information loss. This balancing act is a critical consideration in the design of informative and meaningful data visualisations.


\subsection{Data Types and Visualisation Techniques}
In the world of data visualisation, understanding the nature of your data is key. Data comes in various types, and selecting the appropriate visualisation technique is contingent upon recognising these distinctions. In this section, we categorise data types, and demonstrate how to match each data type with suitable visualisation techniques.

\subsubsection{Categorisation of Data Types}
Data types can be broadly categorised into four main types: 
\begin{itemize}
    \item \textbf{Nominal data}: nominal data represents categories or labels without any inherent order. Examples include colours, gender categories, and city names. 
    \item \textbf{Ordinal data}: ordinal data implies a meaningful order or ranking among categories but lacks equal intervals between them. Examples include survey responses (eg. “very satisfied”, “satisfied”, “neutral”, “dissatisfied”, “very dissatisfied”)
    \item \textbf{Interval data}: interval data possesses ordered categories with equal intervals between them, but it lacks a true zero point. Temperature is measured in Celsius or Fahrenheit as an example. 
    \item \textbf{Ratio data}: ratio data includes ordered categories with equal intervals and a meaningful zero point. Examples are age, income, and weight. 
\end{itemize}

\subsubsection{Matching Data Types with Appropriate Visualisation Techniques}
Selecting appropriate visualisation techniques is essential for effective data communication. Various data types demand specific visualisation methods for optimal representation. For nominal data, bar charts and stacked bar charts are effective in displaying categorical information and relative proportions. Ordinal data benefits from ordered bar charts, dot plots, or stacked bar charts, maintaining the ranking and order of categories. Interval data is best visualised using line charts, histograms, and box plots, showcasing trends and distributions without assuming a true zero point. Ratio data finds effective representation through scatter plots, histograms, and line charts, enabling precise comparisons and measurements due to the presence of a meaningful zero point.

MAKE GRAPH!!!

\subsection{Colour Theory in Data Visualisation}
Here, we explore the significance of colour in data visualisation, the principles of colour perception and encoding, and the importance of avoiding misleading visualisations through thoughtful colour choices.\\

\textbf{The Importance of Colour in Conveying Information}\\
Color significantly enhances the impact and comprehension of data visualisations. It serves multiple purposes: distinguishing data points, emphasizing trends, and offering contextual information. It is utilized to encode categorical data, differentiating between various groups with distinct colors, and to represent quantitative data by utilizing color intensity or gradients to portray values or magnitudes. Additionally, color is instrumental in adding context to visualisations through background elements, labels, or annotations, imparting meaning to the data.\\

\textbf{Colour Perception and Colour Encoding in Visualisations}\\
Understanding color perception in data visualisation is crucial. Key principles involve considering color discrimination, ensuring accessibility for individuals with color vision deficiencies. Careful selection of color schemes aligned with the intended message is essential—for instance, using warm colors like red and orange to indicate caution or warmth, and cool colors like blue and green to convey calmness or coldness. Additionally, attention should be paid to how colors interact when combined; certain combinations might create visual vibrations or impact text legibility.\\

MAKE GRAPH!!!

\textbf{Avoiding Misleading Visualisations Due to Colour Choices}\\
Misleading visualisations often stem from inappropriate or deceptive use of color, requiring precautions to prevent such occurrences. First, maintaining consistency in color usage throughout the visualisation is essential. Employing a uniform color scheme for similar data categories or elements helps establish coherence and understanding. Furthermore, it's crucial to avoid color choices that could distort or exaggerate the data. Overly intense or contrasting colors might mislead interpretations, emphasizing the necessity for judicious color selection.\\
Additionally, providing a clear and concise legend becomes imperative to explain the meaning of colors, especially when dealing with complex or unfamiliar color schemes. A comprehensive legend helps viewers decipher the represented data accurately. User testing stands as another crucial step in the process. Conducting thorough user testing ensures that the chosen color palette effectively conveys the intended message without confusion or misleading the audience. This step validates the visual interpretation and aids in making necessary adjustments to enhance clarity and accuracy in data representation.\\

\subsection{Theoretical Properties of Visualisations}
Effective data visualisation extends beyond aesthetically pleasing graphics; it involves adhering to crucial theoretical properties that enhance expressiveness, precision, accuracy, and scalability in visual representations. This section examines key properties such as expressiveness, effectiveness, the data-ink ratio, principles of minimal ink, as well as precision, accuracy, and scalability.\\

To begin with, we'll define the key concepts that frame this section:
\begin{itemize}
    \item \textbf{Expressiveness}: Visualisations should be expressive, meaning they should effectively communicate the intended message or insights within the data. Expressive visualisations capture the richness and complexity of the underlying data, revealing patterns, trends, and relationships.
    \item \textbf{Effectiveness}: An effective visualisation is one that successfully conveys information to its audience. It allows viewers to understand the data, draw meaningful conclusions, and make informed decisions based on the presented information.
\end{itemize}

\subsubsection{Data-Ink Ratio and the Principle of Minimal Ink} 
This \textbf{Data-Ink Ratio principle}, introduced by Edward Tufte, emphasises maximising the ink (or pixels in digital formats) used to represent the actual data while minimising non-essential ink. A higher data-ink ratio results in a cleaner, more efficient visualisation that reduces clutter and enhances comprehension.\\
The \textbf{Principle of Minimal Ink} builds on the data-ink ratio. This principle advocates for the removal of any visual elements that do not contribute to the viewer's understanding of the data. Eliminating unnecessary ink (e.g., excessive gridlines or decorations) simplifies the visualisation without sacrificing its effectiveness.\\

MAKE GRAPH!!!

\textbf{Precision, Accuracy, and Scalability}\\
The concepts that can be mobilised in order to comply by these principles are precision, accuracy, and scalability. Specifically in the context of data visualisation, precision involves striking a balance between presenting sufficient detail for accurate interpretation while avoiding overwhelming complexity. Accuracy is also vital as its role is ensuring faithful representation of true data values to prevent misleading conclusions. Scalability addresses a visualisation's adaptability to varying data sizes and resolutions, demanding the capability to represent both small and large datasets without compromising clarity or performance.

\subsection{Cognitive Load and Visual Complexity}
In data visualisation, achieving a balance between complexity and cognitive load is crucial. This section explores the concept of cognitive load in visualisations, strategies to reduce cognitive load while maintaining complexity, and techniques to combat information overload through simplification.\\

\textbf{Exploring the Concept of Cognitive Load in Visualisations}\\
In data visualisations, cognitive load significantly influences how viewers engage with and comprehend presented data. Striking a balance is crucial to effectively convey information without overwhelming the viewer's cognitive capacity.

\subsubsection{Strategies to Reduce Cognitive Load While Maintaining Complexity}
To reduce cognitive load while maintaining complexity in data visualisation, several strategies can be employed. Firstly, establishing a clear visual hierarchy using size, color, and contrast helps direct attention to crucial elements. Additionally, simplifying labels and text by avoiding unnecessary complexity and jargon ensures information is clear and easily digestible. Employing interactive features like tooltips and drill-down functionality assists in providing additional information when required, reducing the density of static visualisations. Another approach involves the use of progressive disclosure, presenting complex information gradually, beginning with an overview and allowing users to explore details as needed. Lastly, considering data aggregation where appropriate can help summarize information and alleviate the cognitive load associated with interpreting intricate details.\\

These strategies aim to maintain complexity while lessening the cognitive burden on viewers by directing attention effectively, simplifying content, offering interactive elements, gradually revealing information, and summarizing data where feasible.

\subsubsection{Information Overload and Simplification Techniques}
Addressing information overload in visualisations necessitates the strategic application of simplification techniques. Filtering enables focused data selection, while data reduction aggregates information to highlight overarching trends. Storyboarding structures data presentation, aiding in contextual comprehension, and prioritization ensures critical information is prominently displayed, elevating the visualisation's clarity and impact. These strategies collectively combat overwhelming data or excessive visual elements, enhancing comprehension and the effective communication of insights to viewers.

MAKE GRAPH!!!


\newpage

\section{Modern Methods of Data Visualisation}
In this chapter, we explore a variety of powerful visualisation methods, from classic scatter plots and bar charts to advanced techniques like heatmaps and network graphs. Through vivid examples, we'll show when and why each method is used, and delve into the theoretical and mathematical foundations that empower these visualisations to unveil insights hidden within the data.

\subsection{Scatter Plots and Bubble Charts}
Scatter plots and bubble charts are fundamental data visualisation techniques that provide valuable insights into the relationships and patterns within datasets. These visualisations are particularly effective for representing discrete data through data points, since this bring out easily identifiable comparisons, and reveals trends.

\subsubsection{Scatter Plots}
Scatter plots, also known as dot charts or dot density plots, offer a straightforward yet mathematically intriguing method for visualizing data. At their core, they display individual data points as dots along a single axis, where each dot representing a single observation.\\ 
\\The mathematical interest of dot plots lies in their ability to provide a simple visual representation of data distribution, center, and spread. While they don't rely on complex equations or statistical principles, dot plots make it easy to observe important characteristics of data, such as the mode (the most frequent value), skewness (asymmetry), and potential outliers. \\ 
\\They're particularly useful for comparing multiple data sets, identifying patterns, and detecting data irregularities. Their simplicity is what makes dot plots a valuable tool for both introductory statistics education and exploratory data analysis.

\subsubsection{Regression and the Regression Line}
\textbf{Linear regression} is a fundamental statistical method used to model the relationship between a dependent variable (often denoted as \(Y\)) and one or more independent variables (commonly denoted as \(X\)). The objective of linear regression is to find a linear equation that best represents this relationship. In simple linear regression, with one independent variable, the linear regression line is expressed as:

\[
Y = \beta_0 + \beta_1X + \epsilon
\]

Here, \(\beta_0\) is the intercept, \(\beta_1\) is the slope, \(X\) is the independent variable, and \(\epsilon\) represents the error term. The objective of the linear regression line is to minimise the sum of squared differences between the observed and predicted values of \(Y\), which helps us understand how changes in \(X\) affect \(Y\).\\
Linear regression lines are often featured in scatter plots to give readers more insight into the dataset being plotted, by representing the overall relationship between variables and, by allowing them to make quick comparisons between individual observations and the regression line.\\


\textbf{Scatter Plots in Practice}\\
In this example, we'll create a scatter plot that visualises the relationship between two variables - the weight of cars and the amount of miles traveled per gallon of petrol. We'll use the "mtcars" R dataset.

<<scatter-plot, echo=FALSE, fig.height=3, fig.width=4, fig.cap='Scatter plot of car weights vs MPG'>>=
# Create a scatter plot of car weight vs MPG from mtcars dataset
library(ggplot2)
ggplot(data = mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 3, alpha = 0.7) +  # Larger points with transparency
  geom_smooth(method = "lm", se = FALSE, color = "red", linewidth = 1) +  # Linear regression trend line
  labs(
    x = "Weight (1000 lbs)",
    y = "Miles per Gallon",
    color = "Cylinders"
  ) +
  scale_color_manual(values = c("4" = "grey", "6" = "purple", "8" = "blue")) +  # Custom color palette
  theme_minimal()  # Minimalistic theme
@

\textbf{Analysis of the scatter plot}\\
Figure~\ref{fig:scatter-plot}, provides insights into the relationship between cars' weight and their MPG, with the added dimension of color-coded cylinders.Particularly it visually highlights and make accessible to the viewer features of the data set, that would otherwise go unnoticed. These are some of the following elements: 
\begin{itemize}
    \item \textbf{Clustering}: The scatter plot reveals distinct clustering of data points, highlighting specific patterns within the dataset. Cars with four cylinders (color "grey") are predominantly clustered in the lower weight and higher MPG region, representing smaller and more fuel-efficient vehicles. In contrast, cars with eight cylinders (color "blue") tend to be clustered in the higher weight and lower MPG area, indicating larger and less fuel-efficient cars. The identification of this clustering aids in visualising how the number of cylinders influences the trade-off between weight and fuel efficiency.\\
    \item \textbf{Linear Regression Line}: The regression line provides a visual representation of the overall relationship between car weight and fuel efficiency.If the line has a positive slope, it indicates that as car weight increases, MPG decreases. Conversely, a negative slope suggests that heavier cars tend to have higher MPG. The steepness of the line represents the strength of this relationship. In this case, the reed regression line indicates a negative correlation—cars tend to have lower fuel efficiency as their weight increases.
\end{itemize}

\subsubsection{Bubble Charts}
Bubble charts are a captivating data visualisation tool that extends beyond the typical two-dimensional scatter plot by introducing an extra dimension. They represent data points as bubbles or circles on a two-dimensional plane, where the size of each bubble encodes a third variable. This technique enhances data visualisation by facilitating the exploration of multivariate data and uncovering patterns that may be hidden in traditional scatter plots.\\

\textbf{Bubble Chart's Utility in Visualising Data}\\
Bubble charts excel in scenarios where three key variables need to be conveyed simultaneously. The x-axis and y-axis represent two variables, as in a standard scatter plot, while the size of the bubble encodes a third variable, often a quantitative one. This allows for the visualisation of relationships between three variables in a single, intuitive graphic.\\
For instance, in economics, bubble charts can illustrate economic indicators, with the x-axis showing time, the y-axis displaying GDP growth, and the bubble size representing a related factor like population or inflation. \\

\textbf{Mathematical Intricacies}\\
The mathematical intricacies of constructing bubble charts involve scaling the data values to determine the size of each bubble accurately. The size of the bubble is typically proportional to the square root of the variable it represents. The choice of scaling method depends on the data distribution and the message the chart aims to convey.

The formula for calculating the bubble size (\(S\)) often involves applying a linear or nonlinear scaling function:

\[
S = k \cdot \sqrt{V}
\]

Where:
\begin{itemize}
\item \(S\) is the size of the bubble,
\item \(V\) is the value of the variable being represented, and
\item \(k\) is a scaling factor to control the bubble size.
\end{itemize}

Selecting an appropriate scaling factor (\(k\)) is critical for maintaining the proportionality between the bubble size and the variable being represented.\\

\textbf{Bubble Charts in Practice}
 This bubble plot visualises data from the same dataset as above. The purpose of this plot is to depict the relationship between car models and their fuel efficiency (mpg) while using the size of the bubbles to represent the car's horsepower (hp) and color-coding the bubbles based on the number of cylinders (cyl).

<<buble-plot-chunk, echo=TRUE, fig.height=5, fig.width=10, fig.caption='Bubble plot illustrating the relationship between car models and miles per gallon'>>=
#Create bubble plot 
ggplot(mtcars, aes(x = rownames(mtcars), y = mpg, size = hp, color = cyl)) +
  geom_point() +
  labs(
    x = "Car Models",
    y = "Miles per Gallon",
    size = "Horsepower (hp)",
    color = "Cylinders (cyl)"
  ) +
  scale_size_continuous(range = c(3, 10)) +
  scale_color_gradient(low = "lightblue", high = "darkblue") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust =1))
@

\textbf{Analysis of the bubble chart}\\
The plot's title, axis labels, and legends provide context and clarity to the visualisation, making it accessible and informative. Additionally, the choice of a gradient color scale for the number of cylinders enhances the visual appeal and aids in interpreting the data.This bubble plot allows for quick comparisons between multiple characteristics of different car models.The resulting bubble plot effectively conveys several key insights:
\begin{enumerate}
\item \textbf{Car Model vs. MPG}: The x-axis displays the car models, offering a clear representation of each vehicle in the dataset. The bubble plot is particularly useful for displaying nominal data, such as car model names, as it allows easy identification and comparison.
\item \textbf{Miles per Gallon (MPG)}: The y-axis measures miles per gallon, representing the fuel efficiency of each car model. Higher bubbles indicate better fuel efficiency. This variable, which is continuous, is positioned vertically to demonstrate how each car model's fuel efficiency relates to others.
\item \textbf{Horsepower (HP)}: The size of each bubble represents the car's horsepower (hp). Larger bubbles correspond to higher horsepower, providing an additional dimension to the data. The size encoding helps identify more powerful cars.
\item \textbf{Cylinders (Cyl)}: The color of each bubble is determined by the number of cylinders (cyl) in the car's engine. The color scheme adds a categorical aspect to the visualisation, making it easy to differentiate between cars with different cylinder counts.
\end{enumerate}


subsection{Bar Charts and Histograms}
\subsubsection{Bar Charts}
A bar chart is a very important method to present data. It organizes information into vertical bars.  Bar charts have lots of advantages in data visualisation. It can present data categories in a frequency distribution. A bar chart is best for comparing classified data. Especially when the values are close, because the human perception of height is better than other visual elements (such as area, angle, etc.), the use of a bar chart is more appropriate. These bars usually have different lengths, and every length is proportional to the size of the information they present.\\
R uses the function $barplot()$ to create bar charts. R can draw both vertical and Horizontal bars in the bar chart. In the bar chart, each of the bars can be given different colors.\\
R is a programming language for data analysis and statistical computing, and its advent has made data visualisation more straightforward and accessible. Among the various tools available in R, ggplot2 stands out as one of the most renowned and powerful tools for creating data visualisations. It offers a wealth of data visualisation capabilities and is celebrated for its versatility and aesthetic appeal. In this chapter, we will focus on how to use ggplot2 to create bar charts for data visualisation.\\

\subsubsection{Different Types of Bar Charts}
Here is an overview of the different types of bar charts. \\
\paragraph{Vertical Bar Chart}
This is the most common bar chart. We use different vertical columns to display and compare the values of different categories in the same dimension, where the X-axis represents the contrasting categories and the Y-axis represents the frequency or count of their categories.\\
\paragraph{Horizontal Bar Chart}
This is very similar to a vertical bar chart but rotated 90 degrees. Categories are shown on the y-axis and frequency or count are shown on the x-axis. Horizontal bar charts are especially useful when category names are long or when there are numerous categories.
\paragraph{Multi-set Bar Chart}
Also known as a grouped bar chart or clustered bar chart. A multi-set bar chart is used to represent and compare different sub-groups within individual categories. This type of chart is useful when you want to show and compare multiple sets of data side-by-side.
Multi-set Bar charts can be horizontal or vertical like the other normal bar charts, and the length of each bar represents the frequency or count of their categories.
\paragraph{Stacked bar chart}
Similar to bar charts, stacked bar charts are often used to compare different classes of values and, within each class of values, are divided into sub-classes, which are often referred to by different colors. Each segment's size is proportional to the frequency or count that it represents from the sub-category. The entire bar's length represents the cumulative total of all the sub-categories.
However, it is very easy to get confused when there are too many categories.
Bar charts excel due to their structural simplicity, ease of comprehension, straightforward comparison of different data categories, and versatility for representing various data types and multilevel information

The disadvantages of bar charts include limited suitability for large datasets, potential misinterpretation when lacking a zero baseline, difficulty in handling numerous categories, and their preference for categorical data over continuous data trends, where line graphs are more suitable.
\subsubsection{ToothGrowth Dataset}


This bar chart below illustrates the tooth growth in relation to varying doses of a vitamin. The key observations are:

\begin{enumerate}
    \item \textbf{X-axis Description:} The X-axis represents different dosages of the vitamin (mg/day). There are three distinct dosage levels.
    
    \item \textbf{Y-axis Description:} The Y-axis signifies the length of tooth growth (len). This represents the average tooth growth at the given vitamin dosage.
    \item \textbf{Data Observation:} From the heights of the bars, it is evident that as the vitamin dosage increases, the tooth growth also appears to increase. This might suggest that higher doses of the vitamin may promote tooth growth.
\end{enumerate}
\begin{figure}[htbp]
  \centering
  \begin{minipage}[b]{0.45\linewidth}
    <<barchart2, echo=FALSE, fig.height=4, fig.width=6, out.width='\\linewidth'>>=
    # Screening data included only data with dose 0.5, 1, and 2
    data(ToothGrowth)
    filtered_data <- ToothGrowth %>% filter(dose %in% c(0.5, 1, 2))
    # Create a grouping bar chart and adjust the position of the columns
    ggplot(filtered_data, aes(x = factor(dose), y = len, fill = supp)) +
      geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
      labs(
        x = "Dose (mg/day)",
        y = "Tooth Length",
        fill = "Supplement"
      ) +
      theme_minimal()
    @
    \caption{Tooth Growth by Dose and Supplement (grouping bar chart)}
    \label{fig:barchart2}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.45\linewidth}
    <<barchart3, echo=FALSE, fig.height=4, fig.width=6, out.width='\\linewidth'>>=
    filtered_data <- ToothGrowth %>% filter(dose %in% c(0.5, 1, 2))
    # Create a stacked bar chart
    ggplot(filtered_data, aes(x = factor(dose), y = len, fill = supp)) +
      geom_bar(stat = "identity", position = "stack") +
      labs(
        x = "Dose (mg/day)",
        y = "Tooth Length",
        fill = "Supplement"
      ) +
      theme_minimal()
    @
    \caption{Tooth Growth by Dose and Supplement (stacked bar chart)}
    \label{fig:barchart3}
  \end{minipage}
\end{figure}
The displayed bar chart~\ref{fig:barchart2} provides insights into tooth growth influenced by varying doses of a vitamin, further categorized by the type of supplement (`supp`). The key insights from this chart are:

\begin{enumerate}
    \item \textbf{X-axis Description:} The X-axis demarcates different vitamin dosages, categorized into three distinct levels: 0.5, 1, and 2 mg/day.
    
    \item \textbf{Y-axis Description:} The Y-axis quantifies tooth growth length, representing the combined average growth for both supplements at the respective vitamin dosages.
    \item \textbf{Data Observation:} The total height of each bar signifies the combined tooth growth for both supplements at the given dosage. From the stacked sections, it's evident that the impact on tooth growth varies based on the supplement type. A detailed inspection might elucidate the relative effectiveness of the supplements at each dosage level.
\end{enumerate}
The structure of the second figure~\ref{fig:barchart2} is quite similar to that of the first one, with the main difference lying in the method of data representation. Forming a bar chart, it facilitates the understanding of the combined effects of the two supplements at each dosage level. However, compared to the grouped bar chart, it becomes more challenging to differentiate the individual contributions of each supplement.

In the next part of our section, we will look at another plot which called Histogram.
\subsubsection{Histograms}
Histograms, although visually similar to bar charts, convey different meanings. A histogram involves concepts of statistics. It requires data to be categorized into groups and then counts the data points within each of those groups. On a Cartesian coordinate system, the x-axis shows the endpoints of each group, and the y-axis represents frequency. The height of each rectangle indicates the corresponding frequency, making it a frequency distribution histogram. In order to determine the quantity of each group in the histogram, a multiplication of the frequency by the group interval is necessary. Since every histogram has a fixed group interval, if we use the y-axis to directly show quantity and each rectangle's height indicates the number of data points, we can both retain the distribution and simultaneously see the number in each group at a glance. All examples in this text use the non-standard histogram depiction with the y-axis denoting quantity.\\
\textbf{Uses of Histograms:}
Histograms demonstrates the distribution of frequency or quantity across groups. Facilitates the visualisation of differences in frequency or quantity among groups. The R language uses the \texttt{hist()} function to create histograms. This function takes vectors as input and uses a few more parameters to plot the histogram.\\
Now, we want to create a better graph with ggplot2 thanks to the \texttt{geom\_histogram()} function and iris dataset.\\
The iris dataset is a classic dataset in the field of statistics. It was introduced by the British biologist Ronald A. Fisher in 1936 as an example of discriminant analysis. The dataset consists of 150 samples from three species of iris flowers: setosa, versicolor, and virginica. For each sample, four features were measured: the lengths and the widths of the sepals and petals, all in centimeters. The dataset is often used for classification tasks to differentiate between the three species based on the given measurements. It has become a standard test case for many classification algorithms and is widely recognized in the data science community.\\
<<hist3, echo=TRUE,fig.height=3, fig.width=5, fig.cap='Histogram of Sepal Length in Iris Dataset'>>=
#Create a histogram using ggplot2 for Sepal Length in the Iris dataset
bar_diagram <- ggplot(iris, aes(x = Sepal.Length)) +
  geom_histogram(
    binwidth = 0.2,  # Adjust the box width to 0.2 for smaller data sets
    fill = "grey", 
    color = "black"
  ) +
  labs(
    x = "Sepal Length/cm",
    y = "Frequency"
  ) +
  theme_minimal()
print(bar_diagram)
@
\subsubsection{Kernel Density Estimation}
Kernel Density Estimation(KDE) is an very useful tool in statistics. In stead of discrete histograms, it helps us to create a smooth curve given by a dataset. KDE is used to infer the distribution of a population based on a limited sample. Thus, the result of the kernel density estimation is an estimate of the sample's probability density function. Based on this estimated probability density function, we can ascertain certain characteristics of the data distribution, such as the regions where data is concentrated.
The KDE algorithm takes a parameter, bandwidth, that affects how “smooth” the resulting curve is. Changing the bandwidth changes the shape of the kernel: a lower bandwidth means only points very close to the current position are given any weight, which leads to the estimate looking squiggly; a higher bandwidth means a shallow kernel where distant points can contribute.

We can express KDE as follows,where the K represent the kernel function.
$$\hat{f}(x) = \sum_{\text{observations}} K\left(\frac{x - \text{observation}}{\text{bandwidth}}\right)$$
$$\hat{f}(x) = \frac{1}{nh} \sum_{i=1}^{n} K\left(\frac{x - x_i}{h}\right)$$\\
The kernel function \( K(u) \) is a normalized non-negative function that satisfies:
\[ \int K(u) \, du = 1 \]
<<kde3, echo=TRUE, fig.height=3, fig.width=5, fig.cap='Kernel Density Estimation of Sepal Length in Iris Dataset'>>=
# Create a Kernel Density Estimate plot using ggplot2 for Sepal Length in the Iris dataset
kde_diagram <- ggplot(iris, aes(x = Sepal.Length)) +
  geom_density(
    fill = "grey", 
    alpha = 0.5,  # Adjust the transparency for better visualisation
    adjust = 1  # This parameter can be used to control the smoothness
  ) +
  labs(
    x = "Sepal Length/cm",
    y = "Density"
  ) +
  theme_minimal()
print(kde_diagram)
@
In figure~\ref{fig:kde3} we present the kernel density estimation of our dataset. The kernel density curve will display the distribution of sepal lengths. The peaks of the curve correspond to the main concentration trends of sepal length in the data. If the curve is unimodal, it means that the sepal lengths of most irises are concentrated in that region; if it is bimodal or multimodal, this indicates the presence of multiple such concentration areas.


\subsection{Heatmaps and Tree Maps}
In this chapter, we explore two powerful data visualisation techniques: heatmaps and treemaps. These methods are instrumental for conveying intricate data structures and patterns, offering unique ways to represent multivariate information, making them indispensable tools for data scientists.
\\  
\\We will delve into the theory behind heatmaps and treemaps, understand how to create them using popular data visualisation libraries, and demonstrate their practical applications with real-world examples. By the end of this chapter, you will be well-equipped to leverage heatmaps and treemaps to gain insights from complex and hierarchical datasets.
\subsubsection{Heatmaps - Fire in Brazil}
\\  
\\The heatmap is a data visualisation technique that uses colour coding to represent different intensity.
\\  
\\In this illustrative example, heatmaps are used to visualise fire occurrences in Brazil. These heatmaps provide a spatially coherent representation, highlighting regions at high risk and seasonal patterns. Here, the heatmap is a powerful tool for identifying the occurrence of fire incidents. The data-driven insights could empower policymakers to make informed decisions regarding preventive measures and firefighting strategies.
\\  
\\In Figure~\ref{fig:spacetime-fy22}, it can be observed that significantly higher fire counts are found in certain locations. The presence of two strips with high frequencies of fires are highly unusual.  The vertical trend corresponds to the location of BR-230 (Trans-Amazonian Highway) passing through the city of Apuí, State of Amazonas, where a high frequency of fire occurrence is observed.  The horizontal trend corresponds to BR-163 (Brazil highway) passing through Três Pinheiros in Novo Progresso, State of Pará. The western coastal area with a high frequency of fire occurrence corresponds to regions in close proximity to the cities of Vista Alegre do Abunã and Rio Branco. Research has indicated that 95 \% of active fires and the most intense ones (FRP > 500 megawatts) occurred at the edges in forests.
\\  
\\From the same figure, it can be observed that August and September are the riskiest months in terms of fire hazard, whereas little risk is posed from November to July. The follow-up question naturally arises: How does FY22 compare to previous years? Is it valid to claim that August and September constitute the fire hazard season?
\\    
\\In Figure~\ref{fig:fire-by-months-fy13-22}, the data shows a higher number of fire occurrences in the months of August to October compared to the rest of the year, indicating a greater number of fire hazards during these months.
\\  
<<load-data, echo=FALSE,message=FALSE,warning=FALSE>>=
# Data from NASA: https://firms.modaps.eosdis.nasa.gov/

brazil_fire_fy13 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2013/modis_2013_Brazil.csv')
brazil_fire_fy14 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2014/modis_2014_Brazil.csv')
brazil_fire_fy15 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2015/modis_2015_Brazil.csv')
brazil_fire_fy16 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2016/modis_2016_Brazil.csv')
brazil_fire_fy17 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2017/modis_2017_Brazil.csv')
brazil_fire_fy18 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2018/modis_2018_Brazil.csv')
brazil_fire_fy19 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2019/modis_2019_Brazil.csv')
brazil_fire_fy20 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2020/modis_2020_Brazil.csv')
brazil_fire_fy21 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2021/modis_2021_Brazil.csv')
brazil_fire_fy22 <- readr::read_csv('https://firms.modaps.eosdis.nasa.gov/data/country/modis/2022/modis_2022_Brazil.csv')
@

<<data-cleaning, echo=FALSE,message=FALSE,warning=FALSE>>=
data_list <- list(
  brazil_fire_fy13,
  brazil_fire_fy14,
  brazil_fire_fy15,
  brazil_fire_fy16,
  brazil_fire_fy17,
  brazil_fire_fy18,
  brazil_fire_fy19,
  brazil_fire_fy20,
  brazil_fire_fy21,
  brazil_fire_fy22)

# Function to filter confident fire observation
filter_fire <- function(data) {
  filter_fire <- data %>% filter(confidence >= 95)
  return(filter_fire)
}

# Apply the filtering function to all data frames in the list
confident_fire_decade <- lapply(data_list, filter_fire)

# Access filtered data for a specific fiscal year, fy22
confident_fire_fy22 <- confident_fire_decade[[10]]
@

<<pivot-data-by-month, echo=FALSE,message=FALSE,warning=FALSE>>=
# Create a pivot table, no. of fire occurrences vs. Months (Jan-Dec), in FY22.
confident_fire_months_fy22 <- confident_fire_fy22 %>%
  mutate(acq_date = as.Date(acq_date, format = "%Y-%m-%d")) %>%
  group_by(month = floor_date(acq_date, 'month')) %>%
  summarize(count = n())

# change "2022-01-01" to Jan etc.
confident_fire_months_fy22$abb_month <- format(confident_fire_months_fy22$month, "%b")

# Create a custom order for the months
custom_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

# Reorder the "abb_month" factor based on the custom order
confident_fire_months_fy22$abb_month <- factor(confident_fire_months_fy22$abb_month, levels = custom_order)
@

<<spacetime-fy22,fig.height=4,fig.cap='Frequency of Fire by Space and Time, FY22',fig.show='hold', message=FALSE, warning=FALSE>>=
# Obtain the Brazil map data
brazil_map <- map_data("world", region = "Brazil")

# Create the heatmap of fire occurrences
space_heatmap <- ggplot(confident_fire_fy22, aes(x = longitude, y = latitude)) +
  geom_polygon(data = brazil_map, aes(x = long, y = lat, group = group), 
               fill = "#bdbdbd") +
  geom_bin2d(bins = 300) +
  scale_fill_gradient(low = "#fee6ce", high = "#d7301f") +
  coord_fixed(ratio = 1) +
  theme_minimal()+
  theme(axis.text = element_text(size = 9))

interactive_plot <- ggplotly(space_heatmap)

time_heatmap <- ggplot(confident_fire_months_fy22, 
                       aes(x = abb_month, y = as.character(2022), fill = count)) +
  geom_tile(width = 0.9, height = 0.5) +  # Create the heatmap tiles
  scale_fill_gradient(low = "#fff7ec", high = "#d7301f") +
  labs(x = " ", y = " ", name = "count") +
  theme_minimal() +
  theme(axis.text = element_text(size = 9))

spacetime_fy22 <- grid.arrange(space_heatmap, time_heatmap, nrow = 2, 
                               heights = c(2,0.5))

print(spacetime_fy22)
@


<<pivot-table-fy13-22, echo=FALSE,message=FALSE,warning=FALSE>>=
# Combine all the confident fire datasets into a single dataset
combined_confident_fire <- bind_rows(confident_fire_decade)

# Create a pivot table for fy13-22
pivot_table <- combined_confident_fire %>%
  mutate(acq_date = as.Date(acq_date, format = "%Y-%m-%d"),
         month_year = format(acq_date, "%b %Y")) %>%
  group_by(month_year) %>%
  summarize(count = n())

# Add column "abb_month" and "year" to the dataset "pivot_table"
pivot_table <- pivot_table %>%
  mutate(abb_month = gsub(".*?([A-Za-z]{3}).*", "\\1", month_year)) %>%
  mutate(abb_month = factor(abb_month, levels = custom_order)) %>%
  mutate(year = as.numeric(substring(month_year, nchar(month_year) - 3, nchar(month_year))))
@

<<fire-by-months-fy13-22,fig.height=2.6,fig.width=5,fig.cap='Frequency of Fire Occurrences, FY13-22',fig.show='hold', message=FALSE,warning=FALSE>>=
heatmap_plot <- ggplot(pivot_table, 
                       aes(x = factor(abb_month, levels = custom_order), 
                           y = as.character(year), fill = count)) +
  geom_tile() +
  scale_fill_gradient(low = "#fff7ec", high = "#d7301f") +
  labs(x = " ", y = " ") +
  theme_minimal() +
  theme(axis.text = element_text(size = 9))

print(heatmap_plot)
@


\subsubsection{Heatmaps, correlation matrix and AIC score}
\\  
\\The foundation of a heatmap is a data matrix $M$, where each entry in this matrix represents an observation:
$$M =
\left[
\begin{array}{cccc}
    M_{11} & M_{12} & \ldots & M_{1j} \\  
    M_{21} & M_{22} & \ldots & M_{2j} \\  
    \vdots & \vdots & \ddots & \vdots \\  
    M_{i1} & M_{i2} & \ldots & M_{ij}
\end{array}
\right].
$$
\\Therefore, the first step to create a heatmap is to organize the data into columns and rows. In Figure~\ref{fig:fire-by-months-fy13-22}, the structured data is displayed as a grid of coloured cells, where the colour intensity corresponds to the underlying frequency.
\\  
\\Heatmaps serve as powerful tools for visualizing relationships between covariables within a model. An example of the necessity to analyze a matrix of correlations between variables is found in regression models. In the real world, variables are often correlated, and completely independent relationships are seldom encountered. Therefore, the analysis of pairwise correlations becomes essential. Significantly impacted by highly correlated variables, the regression model requires the selection of one variable from the correlated set. The selection is based on the identification of a regression model with the lowest Akaike Information Criterion (AIC) score among these variables: 

$$AIC = -2 \l(\hat{\mathbf{\theta}})+2 \dim (\mathbf{\theta}),$$
\\where $\l(\hat{\mathbf{\theta}})$ is the log-likelihood function, which is used to find the Maximum Likelihood Estimator (MLE) of a distribution.
\\  
\\The AIC measures the extent to which the linear model fits the dataset. To obtain the best model, minimise the AIC score. In other words, the objective is to have the trend explained by the regression model, while avoiding overfitting that captures the noise in the dataset, ultimately leading to inaccurate predictions.

\subsubsection{Treemaps}
Treemaps are a visualisation method specifically designed for hierarchical data structures. They represent data as nested rectangles, where each rectangle represents a part of the whole. Treemaps offer a visually appealing and efficient way to convey the hierarchical composition of data. The size and color of each rectangle can be used to encode additional information.

\subsubsection{Use Cases for Treemaps}
Treemaps are highly effective when dealing with hierarchical data. Some common use cases include:
\begin{itemize}
\item \textbf{Disk Space Visualisation}: Treemaps can be employed to visualise disk space usage, where the outermost rectangle represents the entire disk, and inner rectangles represent folders and files. The size of each rectangle reflects the space they occupy.
\item \textbf{Market Share Analysis}: In business, treemaps are useful for visualizing market share data. The top-level rectangle represents the total market, and inner rectangles represent individual segments, brands, or products. The size and color of each segment can represent its share and performance.
\end{itemize}

XXX %missing Treemaps


\subsection{Line Charts and Time Series Visualisation}

In this chapter, we are going to investigate the intricacies of the line chart and its most common application: time series.\\
First, a line chart is a statistical representation that uses a Cartesian coordinate system, where each point on the chart corresponds to a pair of coordinates $(x,y)$, to depict changes in numerical values over continuous time intervals or ordered categories. The x-axis typically represents these intervals or categories, while the y-axis conveys quantified data. Hence, data points, represented by a coordinates $\{(x_i,y_i)\}_{1 \leq i \leq n}$, $n$ being the total number of data points. In a line chart, consecutive data points are typically connected by straight lines. The line segment between two points $(x_i,y_i)$ and $(x_{i+1},y_{i+1})$ can be described by the equation of a line in the slope-intercept form: $y=mx+b$, where $m$ is the slope and $b$ is the y-intercept.

\subsubsection{Suitability for Displaying Trends Over Time}
Line charts effectively visualise data trends over time. By plotting data at intervals like days or years, they highlight trends and patterns. Multiple lines on one chart enable easy data comparison, such as contrasting sales of two products. They aid in recognizing seasonal changes, cyclic events, and unexpected shifts, making them invaluable for forecasting. Due to their simplicity, they're accessible to those with minimal data analysis background. Line charts are a prime choice for time series visualisation.

Time series visualisation is essential in data analysis, showcasing time-ordered data. It reveals long-term trends, helping analysts discern patterns for future planning. It's crucial for spotting seasonality in datasets. This method also identifies anomalies, suggesting areas needing investigation. Predictive modeling, based on historical patterns, becomes feasible, fostering proactive choices. Overlaying multiple data series offers richer comparative analysis. Overall, time series visualisation provides quick insights into chronological data, driving informed decisions by highlighting trends, seasonal changes, and outliers.\\
\noindent
\textbf{Limitations:}\\
While line charts are excellent for displaying trends over time, they have limitations. They may not be suitable for showing individual data distributions or for data where there's no logical order. eg. too many points, too many lines, too many zeros.

\subsubsection{Showcase real-world examples of time series visualisations}

Here, we are going to investigate 'exchange rate dataset' and plot all daily and 21-day moving average exchange rates in one figure.


<<echo=FALSE,message=FALSE,warning=FALSE>>=
#Read in the data:
MyData <- read.csv("exchangeRate.csv",
                   header = TRUE, sep = ",",
                   dec = ".",
                   fileEncoding="UTF-8-BOM")

# Convert to data frame
MyData <- data.frame(MyData)

# Convert Date to a Date object
MyData$Date <- as.Date(MyData$Date, format="%d-%b-%y")

# Order the data by Date
MyData <- MyData[order(MyData$Date), ]

# Convert columns to time series
ts_data <- lapply(MyData[-1], ts,
                  start=c(as.numeric(format(min(MyData$Date), "%Y")),
                          as.numeric(format(min(MyData$Date), "%j"))),
                  frequency=365)

plot_dt <- MyData %>% gather(key="Currency", value="Rate", -Date)

# 21-day moving average calculations and plot
columns <- names(MyData)[!names(MyData) %in% "Date"]
for (col in columns) {
  new_col_name <- paste0(col, "_MA21")
  MyData[[new_col_name]] <- zoo::rollapply(MyData[[col]],
                                           width=21, FUN=mean,
                                           fill=NA, align='right')
}

plot_data <- MyData %>% gather(key="Currency", value="Rate", -Date) %>%
  filter(grepl("MA21", Currency))

# Remove "_MA21" from the Currency column for the legend
plot_data$Currency <- gsub("_MA21", "", plot_data$Currency)
@


\begin{figure}
<<message=FALSE,warning=FALSE,fig.dim = c(6, 4)>>=
# Plot daily and 21-day moving average exchange rates of CNY, CAN,
# EUR, HKD, USD to GBP

# First plot
p1 <- ggplot(plot_dt, aes(x=Date, y=Rate, color=Currency)) + geom_line() +
  labs(title="Daily exchange rates", y="Exchange Rate to GBP",
       x="Date", color="Currency")+
  theme_minimal() + theme(legend.position="none")

# Second plot
p2 <- ggplot(plot_data, aes(x=Date, y=Rate, color=Currency)) + geom_line() +
  labs(title="21-Day moving average \n exchange rates",
       y="Exchange Rate to GBP", x="Date", color="Currency")+
  theme_minimal() + theme(legend.position="none")

# Extract the legend
p2_legend <- cowplot::get_legend(p2 + theme(legend.position="bottom"))
# Combine the plots with adjusted widths using cowplot
combined_plot <- cowplot::plot_grid(p1, p2, labels = c("1", "2"),
                                    rel_widths = c(1, 1), nrow=1)
# Combine the plots and the legend
cowplot::plot_grid(combined_plot, p2_legend, ncol=1, rel_heights = c(1, .1))
@
\centering
\caption{Daily and 21-day moving average exchange rates of CNY, CAN, EUR, HKD, USD to GBP}
\label{fig:all exchange rates}
\end{figure}


From the first plot of Figure~\ref{fig:all exchange rates}, we can see the the daily CNY, CAN, EUR, HKD, USD versus GBP exchange in the same plot, which provide us an overview of the trend and comparison. Then we can make the plot smooth by taking averages, which enables easier recognition of trend. From second plot, utilizing a 21-day moving average to represent several exchange rates offers multiple benefits. Firstly, it smoothens out short-term fluctuations, providing a clearer view of the underlying trend in the exchange rates. This helps in identifying consistent patterns and removes noise caused by daily volatility. Secondly, when applied to multiple exchange rates, it allows for a standardized comparison between them.

However, from Figure~\ref{fig:all exchange rates}, for example there are huge gaps between "CNYtoGBP" and "EURtoGBP". This may not suitable for viewing their trends simutaneosly. If we want to display two different time series that measure two different quantities at the same time points, we can draw the second series again on the second Y-axis on the right side.


\begin{figure}[H]
<<message=FALSE,warning=FALSE,fig.dim = c(5, 3.3)>>=
# Plot Double y-axis time series of CNY and EUR to GBP
# Define scale factor
scale_factor <- max(MyData$CNYtoGBP) / max(MyData$EURtoGBP)
df <- MyData %>% select(Date,CNYtoGBP, EURtoGBP)

# Create plot with dual y-axes
ggplot(df, aes(Date)) + geom_line(aes(y = EURtoGBP, color = "EURtoGBP"))+
  geom_line(aes(y = CNYtoGBP / scale_factor, color = "CNYtoGBP"))+ 
  scale_y_continuous(name = "EURtoGBP Exchange Rate axis",
                     sec.axis = sec_axis(~ . * scale_factor,
                                         name = "CNYtoGBP Exchange Rate axis"))+
  labs(color = "Currency") + theme_minimal() + theme(legend.position="bottom")
@
\centering
\caption{Double y-axis time series of CNY and EUR to GBP}
\label{fig:Double y-axis}
\end{figure}


From Figure~\ref{fig:Double y-axis}, the left y-axis represents spot exchange rate of EUR against GBP and the right one represents spot exchange rate of CNY against GBP. Using a double Y-axis to represent the spot exchange rates of EUR to GBP and CNY to GBP offers several advantages. It facilitates the direct comparison of trends between the two exchange rates, providing insights into their correlations or discrepancies. This method is also space-efficient, combining two data series into one graph, allowing for a more concise data presentation. By juxtaposing the two rates, analysts can discern potential global factors affecting both or highlight specific currency volatilities. Additionally, presenting both datasets together offers contextual understanding and simplifies interpretation for a general audience. However, care must be taken with scale selection to avoid potential misrepresentation or misinterpretation.
\\
\noindent
\textbf{Decomposition of one time series into trend, seasonal, and random:}

One of the primary advantages of time series visualisation is the ease with which it allows analysts to identify long-term upward or downward trends in data and patterns that repeat over specific intervals. By decomposing the time series, it would be easy to see those features.

Time series data, $Y_t$, can often be described as a combination of several distinct components:
\begin{itemize}
    \item \textbf{Trend ($T_t$):} The underlying progression in the series.
    \item \textbf{Seasonal ($S_t$):} Periodic fluctuations due to seasonal factor.
    \item \textbf{Residual ($R_t$):} The irregular or error component.
\end{itemize}

The decomposition of a time series can be described in two main models:\\
Additive Model:
In the additive model, the components are added together:
\[
Y_t = T_t + S_t + R_t
\]
Multiplicative Model:
In the multiplicative model, the components are multiplied together:
\[
Y_t = T_t \times S_t \times R_t
\]
In practice, the choice between the additive and multiplicative models often depends on the nature of the time series. If the magnitude of the seasonal fluctuations or the variation around the trend does not vary with the level of the time series, then an additive model is appropriate. If the magnitude of the seasonal fluctuations or the variation around the trend increases or decreases as the time series level changes, then a multiplicative model may be more suitable.


\begin{figure}[H]
<<message=FALSE,warning=FALSE,fig.dim = c(5, 4)>>=
# Plot decomposition of addictive time series model
decomposed_ts <- stats::decompose(ts_data$CNYtoGBP)
plot(decomposed_ts, xlab="Date")
@
\centering
\caption{Decomposition of addictive time series model of CNY to GBP exchange rates}
\label{fig:decomposition of time series}
\end{figure}


Hence, in this way, we will be able to view the seasonal trend and overall trend of CNY to GBP obviously. From Figure~\ref{fig:decomposition of time series}, we can see that the spot exchange rate of CNY to GBP is gradually decreasing as time goes and it has a cyclical trend during years.


\subsection{Network Graphs}
\textbf{Definition and Utility:}
Network graphs, often referred to as graphs or networks, are a powerful data visualisation method used to depict relationships between entities. These entities, known as nodes, are interconnected by edges or links, which represent relationships, connections, or interactions. Network graphs find extensive utility in various fields, such as social network analysis, transportation systems, and even biological networks like protein-protein interactions. They excel at revealing complex dependencies and structures, making them a critical tool for understanding relational data.

\subsubsection{The Mathematics behind Network Graphs:}
Constructing network graphs involves several mathematical intricacies. Here we present just a few of the many concepts that play a role in the creation of such graphs:
\begin{enumerate}
\item \textbf{Nodes and Edges}: Mathematically, a network graph, \(G\), is defined as \(G = (V, E)\), where \(V\) represents the set of nodes and \(E\) represents the set of edges connecting these nodes.
\item \textbf{Node Degree}: The degree of a node is the number of edges connected to it. In a directed graph, nodes can have both in-degrees and out-degrees.
\item \textbf{Centrality Measures}: Centrality metrics like degree centrality, betweenness centrality, and closeness centrality provide insights into the relative importance or influence of nodes within a network.
\item \textbf{Graph Metrics}: Graph theory concepts like shortest paths, connected components, and clustering coefficients are used to analyze the network's structure.
\end{enumerate}

\textbf{Formulas used in Network Graphs:}

\begin{enumerate}
\item \textbf{Degree of a Node (Undirected Graph)}:
\[
\text{Degree}(v) = \sum_{w \in V} A(v, w)
\]
where \(A(v, w)\) is the adjacency matrix element, indicating whether there is a connection between nodes \(v\) and \(w\).
\item \textbf{Degree of a Node (Directed Graph)}:
\[
\text{In-Degree}(v) = \sum_{w \in V} A(w, v)
\]
\[
\text{Out-Degree}(v) = \sum_{w \in V} A(v, w)
\]
\item \textbf{Betweenness Centrality (for unweighted graphs)}:
\[
C_B(v) = \sum_{s \neq v \neq t} \frac{\sigma_{st}(v)}{\sigma_{st}}
\]
where \(\sigma_{st}\) is the number of shortest paths from node \(s\) to \(t\), and \(\sigma_{st}(v)\) is the number of those paths passing through node \(v\).
\end{enumerate}

\subsubsection{Network Graphs in Practice}


<<Network-setup-chunk, echo=FALSE>>=
# Load the Les Miserables dataset
#data("lesmis")

# Create a graph from the Les Miserables dataset
#lesmis_graph <- graph_from_data_frame(lesmis$edges, directed = FALSE)

# Customize the graph appearance
#V(lesmis_graph)$color <- "lightblue"
#V(lesmis_graph)$size <- 10
#V(lesmis_graph)$label <- V(lesmis_graph)$name

# Set the layout
#layout <- layout_with_fr(lesmis_graph)
@

\begin{figure}[h]
\centering
<<network-plot, echo=TRUE, fig.height=5, fig.width=7, fig.caption='Character Interactions in Les Misérables'>>=
# Plot the graph
#plot(lesmis_graph, layout = layout, vertex.label.cex = 0.7, main = "Character Interactions in Les Misérables")

@
\end{figure}

\subsection{Sankey Diagrams}
xxx

\subsection{Geographic Maps and Spatial Data Visualisation}

A \textbf{geographical maps} is a visual representation of an area—a symbolic depiction highlighting relationships between elements of that space, such as objects, regions, or themes. Maps have been used for centuries to navigate and explore the world, and they play a crucial role in understanding our environment, both locally and globally. These maps serve as canvases on which spatial data is painted, allowing for a visual comprehension of information that might otherwise remain abstract.

Before moving on to the spatial data visualisation. It is essential to understand how we map the the earth on a plane. The Earth, a three-dimensional spheroid, can be transformed on a plane through map projections. Each projection offers a different way to "flatten" the Earth, and as a result, each has its strengths and distortions. For instance, the Mercator projection preserves angles but distorts areas as you move towards the poles. Beyond projections, coordinate systems, like the commonly used latitude and longitude, provide a standardized way to pinpoint any location on Earth.

\begin{itemize}
\item \textbf{Latitude} measures the angle between a point on the Earth's surface and the equator, moving north or south. And latitude values range from -90° (South Pole) to +90° (North Pole). The equator, which divides the Earth into the Northern and Southern Hemispheres, is at 0° latitude.
\item \textbf{Longitude} measures the angle between a point on the Earth's surface and the prime meridian, moving east or west.
And longitude values range from -180° to +180°. The prime meridian, which is at 0° longitude, runs from the North Pole through Greenwich, England, to the South Pole. It divides the Earth into the Eastern and Western Hemispheres.
\end{itemize}

Together, lines of longitude and latitude create a grid system over the Earth's surface. By providing both a latitude and longitude value, one can specify an exact location on the Earth's surface. For example, the coordinates (0° N, 0° E) would indicate the intersection of the equator and the prime meridian, located in the Gulf of Guinea off the west coast of Africa.
\\\\
\noindent
\textbf{Spatial data visualisation}\\
Spatial data visualisation are powerful tools that transform raw, often complex datasets into visual representations, revealing patterns, relationships, and insights rooted in location. At their core, maps provide a spatial context, allowing us to see the world's intricate web of interconnectedness. Today, with the surge in big data and advanced visualisation tools, spatial data visualisation is not just about presenting information but also about telling compelling stories, guiding decision-making, and predicting future trends based on geographical patterns.

<<echo=FALSE, warning=FALSE, message=FALSE,include=FALSE>>=
# Load the shapefile
london_boroughs <- suppressMessages(st_read("London_Ward.shp"))

# Load the crime data (assuming it's in CSV format)
crime_data <- read.csv("BoroughLevelCrime.csv")

# Load population data
london_population <- read.csv('housing-density-borough.csv')

london_population_borough <- london_population %>% 
  filter(Year == '2020') %>%
  select(Name, Population)
  
london_population_borough$Name[33] <- 'City of Westminster'

# Summing the total crimes for each borough over the entire timeframe
borough_totals <- crime_data %>%
  group_by(LookUp_BoroughName) %>%
  summarise(Total_Crimes = sum(across(starts_with("X2020"))))

borough_totals$LookUp_BoroughName[33] <- 'City of Westminster'

borough_totals <- merge(borough_totals, london_population_borough,
                     by.x="LookUp_BoroughName", by.y="Name")

borough_totals$Crime_rate <- borough_totals$Total_Crimes / borough_totals$Population

borough_totals <- borough_totals %>%
  select(LookUp_BoroughName, Crime_rate)

# Merge the crime data with the shapefile
merged_data <- merge(london_boroughs, borough_totals,
                     by.x="DISTRICT", by.y="LookUp_BoroughName")


# Aggregate geometries by district
aggregated_data <- merged_data %>%
  group_by(DISTRICT) %>%
  summarise(geometry = st_union(geometry), Crime_rate = first(Crime_rate))

# Calculate centroids for labeling
aggregated_data$centroid <- st_centroid(aggregated_data$geometry)
@

\noindent
Here, we are going to construct a geographical map of the Greater London and show each ward. 



\begingroup
\setlength{\intextsep}{5pt plus 2pt minus 2pt}
\setlength{\textfloatsep}{5pt plus 2pt minus 2pt}
\setlength{\abovecaptionskip}{2pt plus 1pt minus 1pt}
\setlength{\belowcaptionskip}{2pt plus 1pt minus 1pt}

\begin{figure}[H]
<<warning=FALSE,message=FALSE,fig.dim=c(5,5)>>=
# Plot London map by ward
ggplot(data = london_boroughs) + geom_sf(fill = "lightblue", color = "black") + 
  theme_minimal() + labs(y="Latitude", x="Longitude")
@
\centering
\caption{London Wards Map}
\label{fig:London Wards Map}
\end{figure}
\endgroup

From Figure~\ref{fig:London Wards Map}, we can all wards of the Greater London and we can specify their locations by latitude and longitude. However, a map does not convey much information except the position. Hence, we are going to calculate the crime rate by dividing crime count in the borough by population in the borough at 2020 and present by a choropleth map.


\begin{figure}[H]
<<warning=FALSE,message=FALSE,fig.dim=c(5,5)>>=
# Plot the Crime rate in London by boroughs
ggplot(data=aggregated_data) + geom_sf(aes(fill=Crime_rate)) +
  geom_sf_text(aes(label = DISTRICT, geometry = centroid),
               size = 2.5, check_overlap = TRUE) +
  scale_fill_gradient(low="Green", high="red") + theme_minimal() +
  labs(fill="Crime rate")
@
\centering
\caption{Crime rate by boroughs in London in 2020}
\label{fig:crime rate london}
\end{figure}

From Figure~\ref{fig:crime rate london}, we can discern the safety levels of each borough. Green denotes safe areas, while red indicates unsafe ones. It is evident that boroughs closer to the city center tend to be less safe.

\subsection{3D and Interactive Visualisations}
ggplot2 is one of the most popular data visualisation libraries in R, but it is primarily designed for 2D data visualisation. Directly creating 3D views with ggplot2 can be challenging.


R provides several packages for 3D visualization, such as rgl, plot3D, rayshader, and others, which are specifically designed for three-dimensional data. These packages offer the capability to create 3D scatter plots, surface plots, heat maps, contour maps, and more.


\textbt{rgl}: This is one of the most popular R packages for creating interactive 3D charts. It supports various types of 3D graphics including points, lines, and surfaces, and allows users to interactively rotate, zoom, and pan the view.\\
\textbt{scatterplot}：This package provides a function to create 3D scatter plots. It does not support interactive manipulation, but the generated graphics are well-suited for display in static reports.

3D data visualisation is an approach that employs three-dimensional graphics to represent complex data structures, allowing for an immersive exploration of information. Unlike traditional 2D visualisations (like bar graphs or line charts), 3D visualisations can convey an additional dimension of data, making them particularly valuable in specific contexts.

Our first example will be  a scatter plot. We can use scatterplot3d package to help us for data visualisation.

<<3d1, echo=TRUE, fig.height=4, fig.width=4, fig.cap='3d scatter plot'>>=

# Generate colors based on the Volume variable
colors <- colorRampPalette(c("blue", "red"))(length(unique(trees$Volume)))
color_assign <- colors[as.numeric(as.factor(trees$Volume))]
# Create 3d scatter plot with colors
scatterplot3d(trees$Girth, trees$Height, trees$Volume, 
              color=color_assign,
              main="3D Scatterplot of trees data",
              xlab="Girth (inches)", 
              ylab="Height (ft)", 
              zlab="Volume (cubic ft)")

@



\section{Trees Dataset in R}



\subsection{Advanced Visualisation Techniques}
xxx




\section{Practical Implementations}
XXX




\section{Case Studies}
\subsection{Market Analysis Dashboards}
XXX
\subsection{Healthcare Data Visualisation}
XXX




\section{State-of-the-Art Approaches}
XXX


\section{Conclusion}

XXX

\end{document}