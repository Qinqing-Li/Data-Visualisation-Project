\documentclass{article}

\begin{document}

<<setup, echo=FALSE,message=FALSE,warning=FALSE>>=
library(maps)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(lubridate)
library(readxl)
library(forecast)
library(plotly)
# Load the mtcars dataset
data(mtcars)
@



\section*{Showcase real-world examples of time series visualisations.}

Time series of the daily CNY, CAN, EUR, HKD, USD versus GBP exchange reference rate data
published by the European Central Bank over the time period from 01 Jan 2013 to 12 Oct 2023 (without weekends). The exchange rate tells you how many pounds you need to buy/sell 1 CNY, CAN, EUR, HKD, USD.

\subsection{The data set has the format as below:}

\begin{table}[h]
\centering
\begin{tabular}{|c|c|c|c|c|c|}
\hline
\textbf{Date} & \textbf{CNYtoGBP} & \textbf{CANtoGBP} & \textbf{EURtoGBP} & \textbf{HKDtoGBP} & \textbf{USDtoGBP} \\
\hline
\%d-\%m-\%y & Value & Value & Value & Value & Value \\
\hline
& & & & & \\
\hline
\end{tabular}
\caption{Field Information: CNY, CAN, EUR, HKD, USD to GBP}
\end{table}


\subsection{Multiple time series in one plot:}

<<echo=FALSE>>=
#Read in the data:
MyData <- read.csv("exchangeRate.csv",
                   header = TRUE, sep = ",",
                   dec = ".",
                   fileEncoding="UTF-8-BOM")

MyData <- data.frame(MyData)

# Convert Date to a Date object
MyData$Date <- as.Date(MyData$Date, format="%d-%b-%y")

# Order the data by Date
MyData <- MyData[order(MyData$Date), ]

# Convert columns to time series
ts_data <- lapply(MyData[-1], ts,
                  start=c(as.numeric(format(min(MyData$Date), "%Y")),
                          as.numeric(format(min(MyData$Date), "%j"))),
                  frequency=365)

# Plot time series
plot(MyData$Date, ts_data$CNYtoGBP, type="l",
     col="blue", ylim=range(MyData[-1]),
     ylab="Exchange Rate", xlab="Date",
     main="Exchange Rates Over Time")

lines(MyData$Date, ts_data$CANtoGBP, col="red")
lines(MyData$Date, ts_data$EURtoGBP, col="green")
lines(MyData$Date, ts_data$HKDtoGBP, col="purple")
lines(MyData$Date, ts_data$USDtoGBP, col="brown")
legend("topright", legend=names(ts_data),
       fill=c("blue", "red", "green", "purple", "brown"))
@


<<>>=
# Calculate 21-day moving average for each currency
columns <- names(MyData)[!names(MyData) %in% "Date"]
for (col in columns) {
  new_col_name <- paste0(col, "_MA7")
  MyData[[new_col_name]] <- zoo::rollapply(MyData[[col]], width=21, FUN=mean, fill=NA, align='right')
}

# Plotting
plot_data <- MyData %>% gather(key="Currency", value="Rate", -Date) %>%
  filter(grepl("MA7", Currency))

ggplot(plot_data, aes(x=Date, y=Rate, color=Currency)) +
  geom_line() +
  labs(title="7-Day Moving Average of Exchange Rates",
       subtitle="",
       y="Exchange Rate to GBP (21-Day MA)",
       x="Date",
       color="Currency") +
  theme_minimal() +
  scale_color_brewer(palette="Set1")
@




\subsection{Decomposition of one time series into trend, seasonal, and random.}


One of the primary advantages of time series visualization is the ease with which it allows analysts to identify long-term upward or downward trends in data and patterns that repeat over specific intervals. By decomposing the time series, it would be easy to see those features.

<<echo=FALSE>>=
plot(decompose(ts_data$CNYtoGBP), xlab="Date")
@





\subsection{Cyclical plots}

For data with clear cyclical patterns (e.g., daily, weekly, monthly), plotting data in a circular fashion can highlight these cycles.

<<>>=
MyData$Month <- month(MyData$Date, label = TRUE)
MyData$Day <- day(MyData$Date)

ggplot(MyData, aes(x = Month, y = USDtoGBP)) + 
  geom_path(aes(group = Day), color = "blue") + 
  coord_polar(start = 0) +
  labs(title = "Cyclical Plot of USD to GBP") +
  theme_minimal()
@















\subsection{Animated Time Series:}
This type of visualization allows for the observation of changes over time in an animated fashion. plotly is a great library for this.
<<>>=
selected_columns <- c("CNYtoGBP", "EURtoGBP")

# Create an interactive line chart
plot_data <- MyData %>%
  select(Date, all_of(selected_columns)) %>%
  gather(key="Currency", value="Rate", -Date)

fig <- plot_ly(data = plot_data) %>%
  add_trace(x = ~Date, y = ~Rate, color = ~Currency, type="scatter", mode="lines") %>%
  layout(title = "Interactive Exchange Rates Over Time",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Exchange Rate to GBP"),
         hovermode = "x")

# Display the plot
fig
@



\subsection{Double y-axis time series plot.}

If we want to display two different time series that measure two different quantities at the same time points, we can draw the second series again on the second Y-axis on the right side.

<<echo=FALSE>>=
# Plot the first time series with its y-axis
plot(ts_data$CNYtoGBP, type="l", col="blue", ylab="Exchange Rate", xlab="Date",
     main="Exchange Rates Over Time")

# Add the second time series with a secondary y-axis
par(new=TRUE)
plot(ts_data$EURtoGBP, type="l", col="red", axes=FALSE, xlab=NA, ylab=NA)
axis(side=4)  # Add the secondary y-axis on the right
mtext("Temp", side=4, line=3)  # Label the secondary y-axis

# Add a legend to distinguish the two time series
legend("topright", legend=c("CNYtoGBP", "EURtoGBP"),
       col=c("blue", "red"), lty=1, cex=0.8)
@


A common approach to anomaly detection in time series data is to use the Z-score. The Z-score measures how many standard deviations a data point is from the mean. Data points with a Z-score above a certain threshold (e.g., 2 or 3) can be considered anomalies.

<<>>=
# Calculate the Z-scores for the EURtoGBP exchange rate
eur_to_gbp_series <- MyData$EURtoGBP
mean_val <- mean(eur_to_gbp_series, na.rm = TRUE)
std_val <- sd(eur_to_gbp_series, na.rm = TRUE)
z_scores <- abs((eur_to_gbp_series - mean_val) / std_val)

# Define a threshold for anomalies (e.g., Z-score > 2)
threshold <- 3
anomalies <- which(z_scores > threshold)


plot_data <- data.frame(Date =  MyData$Date, Rate = eur_to_gbp_series, Anomaly = ifelse(z_scores > threshold, eur_to_gbp_series, NA))

ggplot(plot_data, aes(x = Date, y = Rate)) +
  geom_line(aes(color = "EURtoGBP")) +
  geom_point(aes(y = Anomaly, color = "Anomalies"), na.rm = TRUE) +
  labs(title = "EURtoGBP Exchange Rate with Anomalies Highlighted", y = "Exchange Rate to GBP", color = "Legend") +
  theme_minimal() +
  scale_color_manual(values = c("EURtoGBP" = "blue", "Anomalies" = "red"))
@


\end{document}
